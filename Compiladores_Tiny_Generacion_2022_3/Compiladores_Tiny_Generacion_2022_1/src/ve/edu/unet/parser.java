
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({ "rawtypes" })
public class parser extends java_cup.runtime.lr_parser {

  public final Class getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {
    super();
  }

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {
    super(s);
  }

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    super(s, sf);
  }

  /** Production table. */
  protected static final short _production_table[][] = unpackFromStrings(new String[] {
      "\000\045\000\002\002\003\000\002\002\004\000\002\003" +
          "\005\000\002\003\003\000\002\004\003\000\002\004\003" +
          "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
          "\002\004\003\000\002\004\003\000\002\005\007\000\002" +
          "\005\011\000\002\006\006\000\002\020\002\000\002\021" +
          "\002\000\002\007\012\000\002\010\004\000\002\011\004" +
          "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
          "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
          "\014\005\000\002\014\005\000\002\014\003\000\002\015" +
          "\005\000\002\015\003\000\002\015\003\000\002\015\003" +
          "\000\002\015\003\000\002\015\005\000\002\017\006\000" +
          "\002\016\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {
    return _production_table;
  }

  /** Parse-action table. */
  protected static final short[][] _action_table = unpackFromStrings(new String[] {
      "\000\110\000\020\003\022\004\017\010\005\012\004\013" +
          "\021\014\020\030\010\001\002\000\004\014\112\001\002" +
          "\000\020\003\022\004\017\010\005\012\004\013\021\014" +
          "\020\030\010\001\002\000\014\002\ufffc\006\ufffc\007\ufffc" +
          "\011\ufffc\027\ufffc\001\002\000\014\002\ufffd\006\ufffd\007" +
          "\ufffd\011\ufffd\027\ufffd\001\002\000\004\014\105\001\002" +
          "\000\014\002\ufff9\006\ufff9\007\ufff9\011\ufff9\027\ufff9\001" +
          "\002\000\014\002\ufffe\006\ufffe\007\ufffe\011\ufffe\027\ufffe" +
          "\001\002\000\014\002\ufffb\006\ufffb\007\ufffb\011\ufffb\027" +
          "\ufffb\001\002\000\004\016\103\001\002\000\004\002\102" +
          "\001\002\000\014\002\ufffa\006\ufffa\007\ufffa\011\ufffa\027" +
          "\ufffa\001\002\000\014\003\034\014\033\015\027\025\040" +
          "\031\037\001\002\000\006\016\ufff3\031\061\001\002\000" +
          "\014\003\034\014\033\015\027\025\040\031\037\001\002" +
          "\000\014\002\ufff7\006\ufff7\007\ufff7\011\ufff7\027\ufff7\001" +
          "\002\000\006\002\001\027\025\001\002\000\014\002\ufff8" +
          "\006\ufff8\007\ufff8\011\ufff8\027\ufff8\001\002\000\020\003" +
          "\022\004\017\010\005\012\004\013\021\014\020\030\010" +
          "\001\002\000\014\002\uffff\006\uffff\007\uffff\011\uffff\027" +
          "\uffff\001\002\000\040\002\uffe4\005\uffe4\006\uffe4\007\uffe4" +
          "\011\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
          "\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\001\002\000\040" +
          "\002\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9\020" +
          "\uffe9\021\uffe9\022\uffe9\023\053\024\052\026\uffe9\027\uffe9" +
          "\030\uffe9\032\uffe9\001\002\000\014\002\uffef\006\uffef\007" +
          "\uffef\011\uffef\027\uffef\001\002\000\040\002\uffe2\005\uffe2" +
          "\006\uffe2\007\uffe2\011\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
          "\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2" +
          "\001\002\000\042\002\uffe3\005\uffe3\006\uffe3\007\uffe3\011" +
          "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
          "\026\uffe3\027\uffe3\030\uffe3\031\061\032\uffe3\001\002\000" +
          "\040\002\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\017\uffe1" +
          "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\027" +
          "\uffe1\030\uffe1\032\uffe1\001\002\000\040\002\uffe6\005\uffe6" +
          "\006\uffe6\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
          "\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6" +
          "\001\002\000\034\002\uffec\005\uffec\006\uffec\007\uffec\011" +
          "\uffec\017\046\020\045\021\047\022\050\026\uffec\027\uffec" +
          "\030\uffec\032\uffec\001\002\000\014\003\034\014\033\015" +
          "\027\025\040\031\037\001\002\000\014\003\034\014\033" +
          "\015\027\025\040\031\037\001\002\000\004\026\042\001" +
          "\002\000\040\002\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5" +
          "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\026" +
          "\uffe5\027\uffe5\030\uffe5\032\uffe5\001\002\000\004\032\044" +
          "\001\002\000\040\002\uffe0\005\uffe0\006\uffe0\007\uffe0\011" +
          "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
          "\026\uffe0\027\uffe0\030\uffe0\032\uffe0\001\002\000\014\003" +
          "\034\014\033\015\027\025\040\031\037\001\002\000\014" +
          "\003\034\014\033\015\027\025\040\031\037\001\002\000" +
          "\014\003\034\014\033\015\027\025\040\031\037\001\002" +
          "\000\014\003\034\014\033\015\027\025\040\031\037\001" +
          "\002\000\040\002\uffea\005\uffea\006\uffea\007\uffea\011\uffea" +
          "\017\uffea\020\uffea\021\uffea\022\uffea\023\053\024\052\026" +
          "\uffea\027\uffea\030\uffea\032\uffea\001\002\000\014\003\034" +
          "\014\033\015\027\025\040\031\037\001\002\000\014\003" +
          "\034\014\033\015\027\025\040\031\037\001\002\000\040" +
          "\002\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\017\uffe8\020" +
          "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\026\uffe8\027\uffe8" +
          "\030\uffe8\032\uffe8\001\002\000\040\002\uffe7\005\uffe7\006" +
          "\uffe7\007\uffe7\011\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
          "\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\001" +
          "\002\000\040\002\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb" +
          "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\053\024\052\026" +
          "\uffeb\027\uffeb\030\uffeb\032\uffeb\001\002\000\030\002\uffed" +
          "\005\uffed\006\uffed\007\uffed\011\uffed\021\047\022\050\026" +
          "\uffed\027\uffed\030\uffed\032\uffed\001\002\000\030\002\uffee" +
          "\005\uffee\006\uffee\007\uffee\011\uffee\021\047\022\050\026" +
          "\uffee\027\uffee\030\uffee\032\uffee\001\002\000\014\003\034" +
          "\014\033\015\027\025\040\031\037\001\002\000\010\021" +
          "\047\022\050\032\063\001\002\000\042\002\uffdf\005\uffdf" +
          "\006\uffdf\007\uffdf\011\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
          "\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf" +
          "\032\uffdf\001\002\000\004\016\065\001\002\000\014\003" +
          "\034\014\033\015\027\025\040\031\037\001\002\000\004" +
          "\030\ufff2\001\002\000\004\030\010\001\002\000\004\016" +
          "\071\001\002\000\014\003\034\014\033\015\027\025\040" +
          "\031\037\001\002\000\014\002\ufff1\006\ufff1\007\ufff1\011" +
          "\ufff1\027\ufff1\001\002\000\004\005\074\001\002\000\020" +
          "\003\022\004\017\010\005\012\004\013\021\014\020\030" +
          "\010\001\002\000\010\006\076\007\077\027\025\001\002" +
          "\000\020\003\022\004\017\010\005\012\004\013\021\014" +
          "\020\030\010\001\002\000\014\002\ufff6\006\ufff6\007\ufff6" +
          "\011\ufff6\027\ufff6\001\002\000\006\007\101\027\025\001" +
          "\002\000\014\002\ufff5\006\ufff5\007\ufff5\011\ufff5\027\ufff5" +
          "\001\002\000\004\002\000\001\002\000\014\003\034\014" +
          "\033\015\027\025\040\031\037\001\002\000\014\002\uffdd" +
          "\006\uffdd\007\uffdd\011\uffdd\027\uffdd\001\002\000\004\015" +
          "\106\001\002\000\016\002\uffde\006\uffde\007\uffde\011\uffde" +
          "\016\uffde\027\uffde\001\002\000\006\011\110\027\025\001" +
          "\002\000\014\003\034\014\033\015\027\025\040\031\037" +
          "\001\002\000\014\002\ufff4\006\ufff4\007\ufff4\011\ufff4\027" +
          "\ufff4\001\002\000\014\002\ufff0\006\ufff0\007\ufff0\011\ufff0" +
          "\027\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {
    return _action_table;
  }

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = unpackFromStrings(new String[] {
      "\000\110\000\026\002\014\003\022\004\011\005\006\006" +
          "\005\007\012\010\015\011\010\016\023\017\013\001\001" +
          "\000\002\001\001\000\024\003\106\004\011\005\006\006" +
          "\005\007\012\010\015\011\010\016\023\017\013\001\001" +
          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
          "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
          "\072\013\035\014\027\015\034\017\031\001\001\000\004" +
          "\020\063\001\001\000\014\012\030\013\035\014\027\015" +
          "\034\017\031\001\001\000\002\001\001\000\002\001\001" +
          "\000\002\001\001\000\022\004\025\005\006\006\005\007" +
          "\012\010\015\011\010\016\023\017\013\001\001\000\002" +
          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
          "\000\002\001\001\000\002\001\001\000\014\012\042\013" +
          "\035\014\027\015\034\017\031\001\001\000\014\012\040" +
          "\013\035\014\027\015\034\017\031\001\001\000\002\001" +
          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
          "\000\012\013\057\014\027\015\034\017\031\001\001\000" +
          "\012\013\056\014\027\015\034\017\031\001\001\000\010" +
          "\014\055\015\034\017\031\001\001\000\010\014\050\015" +
          "\034\017\031\001\001\000\002\001\001\000\006\015\054" +
          "\017\031\001\001\000\006\015\053\017\031\001\001\000" +
          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
          "\001\001\000\002\001\001\000\012\013\061\014\027\015" +
          "\034\017\031\001\001\000\002\001\001\000\002\001\001" +
          "\000\002\001\001\000\014\012\065\013\035\014\027\015" +
          "\034\017\031\001\001\000\004\021\066\001\001\000\004" +
          "\016\067\001\001\000\002\001\001\000\014\012\071\013" +
          "\035\014\027\015\034\017\031\001\001\000\002\001\001" +
          "\000\002\001\001\000\024\003\074\004\011\005\006\006" +
          "\005\007\012\010\015\011\010\016\023\017\013\001\001" +
          "\000\002\001\001\000\024\003\077\004\011\005\006\006" +
          "\005\007\012\010\015\011\010\016\023\017\013\001\001" +
          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
          "\002\001\001\000\014\012\103\013\035\014\027\015\034" +
          "\017\031\001\001\000\002\001\001\000\002\001\001\000" +
          "\002\001\001\000\002\001\001\000\014\012\110\013\035" +
          "\014\027\015\034\017\031\001\001\000\002\001\001\000" +
          "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {
    return _reduce_table;
  }

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions() {
    action_obj = new CUP$parser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
      int act_num,
      java_cup.runtime.lr_parser parser,
      java.util.Stack stack,
      int top)
      throws java.lang.Exception {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {
    return 0;
  }

  /** Indicates start production. */
  public int start_production() {
    return 1;
  }

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {
    return 0;
  }

  /** <code>error</code> Symbol index. */
  public int error_sym() {
    return 1;
  }

  /***********
   * SymbolFactory es una nueva caracteristica que ha sido a�adida a las version
   * 11a de cup, la cual facilita la implementacion de clases Symbol
   * personalizadas
   * , esto debido a que dicha clase no provee mucha informaci�n de contexto que
   * podria ser util para el analisis semantico o ayudar en la construccion del
   * AST
   * Mas informacion en:
   * http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
   ***********/
  public static void main(String args[]) throws Exception {
    SymbolFactory sf = new DefaultSymbolFactory();
    parser parser_obj;
    if (args.length == 0)
      parser_obj = new parser(new Lexico(new InputStreamReader(System.in), sf), sf);
    else
      parser_obj = new parser(new Lexico(new InputStreamReader(new java.io.FileInputStream(args[0])), sf), sf);

    parser_obj.parse();
    NodoBase root = parser_obj.action_obj.getASTroot();
    System.out.println();
    System.out.println("IMPRESION DEL AST GENERADO");
    System.out.println();
    Util.imprimirAST(root);
    TablaSimbolos ts = new TablaSimbolos();
    ts.cargarTabla(root);
    ts.ImprimirClaves();
    Generador.setTablaSimbolos(ts);
    Generador.generarCodigoObjeto(root);
  }

  /** Cup generated class to encapsulate user supplied action code. */
  @SuppressWarnings({ "rawtypes", "unchecked", "unused" })
  class CUP$parser$actions {

    private boolean debug = true;
    private NodoBase ast = null;
    private int lineanum = 0;

    // Debe ser llamada solo despues de un parse(), en caso contrario retornara null
    // siempre;
    public NodoBase getASTroot() {
      return ast;
    }

    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
      this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
        int CUP$parser$act_num,
        java_cup.runtime.lr_parser CUP$parser$parser,
        java.util.Stack CUP$parser$stack,
        int CUP$parser$top)
        throws java.lang.Exception {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 0: // program ::= stmt_seq
        {
          Object RESULT = null;
          int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase s = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 1");
          ast = s;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("program", 0,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 1: // $START ::= program EOF
        {
          Object RESULT = null;
          int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          RESULT = start_val;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 2: // stmt_seq ::= stmt_seq SEMI stmt
        {
          NodoBase RESULT = null;
          int inileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int iniright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase ini = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int sentleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int sentright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase sent = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 2a");
          NodoBase hijoActual = ini;
          if (hijoActual != null) {
            while (hijoActual.TieneHermano()) {
              hijoActual = hijoActual.getHermanoDerecha();
            }
            hijoActual.setHermanoDerecha(sent);
            RESULT = ini;
          } else {
            RESULT = sent;
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq", 1,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 3: // stmt_seq ::= stmt
        {
          NodoBase RESULT = null;
          int sentleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int sentright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase sent = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 2b");
          RESULT = sent;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq", 1,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 4: // stmt ::= if_stmt
        {
          NodoBase RESULT = null;
          int sifleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int sifright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase sif = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 3a");
          RESULT = sif;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt", 2,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 5: // stmt ::= repeat_stmt
        {
          NodoBase RESULT = null;
          int srepleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int srepright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase srep = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 3b");
          RESULT = srep;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt", 2,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 6: // stmt ::= assign_stmt
        {
          NodoBase RESULT = null;
          int sasileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int sasiright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase sasi = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 3c");
          RESULT = sasi;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt", 2,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 7: // stmt ::= read_stmt
        {
          NodoBase RESULT = null;
          int slecleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int slecright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase slec = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 3d");
          RESULT = slec;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt", 2,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 8: // stmt ::= write_stmt
        {
          NodoBase RESULT = null;
          int sescleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int sescright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase sesc = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 3e");
          RESULT = sesc;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt", 2,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 9: // stmt ::= vector_stmt
        {
          NodoBase RESULT = null;
          int sarrayleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int sarrayright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase sarray = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 3f");
          RESULT = sarray;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt", 2,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 10: // stmt ::= error
        {
          NodoBase RESULT = null;
          if (debug)
            System.out.println("\t regla 3g");
          System.out.println("Ocurrio error en cup # 0004");
          RESULT = null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt", 2,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 11: // if_stmt ::= IF exp THEN stmt_seq END
        {
          NodoBase RESULT = null;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
          int pthenleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int pthenright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          NodoBase pthen = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          if (debug)
            System.out.println("\t regla 5a");
          RESULT = new NodoIf(ex, pthen);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt", 3,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 12: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END
        {
          NodoBase RESULT = null;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
          int pthenleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
          int pthenright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
          NodoBase pthen = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
          int pelseleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int pelseright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          NodoBase pelse = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          if (debug)
            System.out.println("\t regla 5b");
          RESULT = new NodoIf(ex, pthen, pelse);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt", 3,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 13: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp
        {
          NodoBase RESULT = null;
          int cuerpoleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int cuerporight = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase cuerpo = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int pruebaleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int pruebaright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase prueba = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 6");
          RESULT = new NodoRepeat(cuerpo, prueba);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt", 4,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 14: // NT$0 ::=
        {
          NodoBase RESULT = null;
          int variableleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int variableright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          String variable = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 7 parte del medio");
          /*
           * lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
           * String nombre = variable.getName();
           */

          CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0", 14,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 15: // NT$1 ::=
        {
          NodoBase RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int variableleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
          int variableright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
          String variable = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 7 parte final");
          if (variable != null)
            RESULT = new NodoAsignacion(variable.toString(), ex);
          else {
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0001");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1", 15,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 16: // assign_stmt ::= ID NT$0 ASSIGN exp NT$1 vector_stmt ASSIGN exp
        {
          NodoBase RESULT = null;
          // propagate RESULT from NT$1
          RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
          int variableleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;
          int variableright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;
          String variable = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
          int vectorleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int vectorright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase vector = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase r = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 8");
          if (vector != null)
            RESULT = new NodoAsignacion(vector.toString(), r);
          else {
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0001");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt", 5,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 17: // read_stmt ::= READ ID
        {
          NodoBase RESULT = null;
          int variableleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int variableright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          String variable = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 9");
          System.out.println("Leyendo Variable");
          if (variable != null)
            RESULT = new NodoLeer(variable.toString());
          else {
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0002");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt", 6,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 18: // write_stmt ::= WRITE exp
        {
          NodoBase RESULT = null;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 10");
          RESULT = new NodoEscribir(ex);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt", 7,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 19: // exp ::= simple_exp LT simple_exp
        {
          NodoBase RESULT = null;
          int exIleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int exIright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase exI = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int exDleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exDright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase exD = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 11a");
          RESULT = new NodoOperacion(exI, tipoOp.menor, exD);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 8,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 20: // exp ::= simple_exp EQ simple_exp
        {
          NodoBase RESULT = null;
          int exIleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int exIright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase exI = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int exDleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exDright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase exD = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 11b");
          RESULT = new NodoOperacion(exI, tipoOp.igual, exD);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 8,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 21: // exp ::= simple_exp
        {
          NodoBase RESULT = null;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 11c");
          RESULT = ex;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 8,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 22: // simple_exp ::= simple_exp PLUS term
        {
          NodoBase RESULT = null;
          int exIleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int exIright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase exI = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int exDleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exDright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase exD = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 12a");
          RESULT = new NodoOperacion(exI, tipoOp.mas, exD);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp", 9,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 23: // simple_exp ::= simple_exp MINUS term
        {
          NodoBase RESULT = null;
          int exIleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int exIright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase exI = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int exDleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exDright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase exD = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 12b");
          RESULT = new NodoOperacion(exI, tipoOp.menos, exD);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp", 9,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 24: // simple_exp ::= term
        {
          NodoBase RESULT = null;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 12c");
          RESULT = ex;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp", 9,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 25: // term ::= term TIMES factor
        {
          NodoBase RESULT = null;
          int exIleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int exIright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase exI = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int exDleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exDright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase exD = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 11a");
          RESULT = new NodoOperacion(exI, tipoOp.por, exD);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("term", 10,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 26: // term ::= term OVER factor
        {
          NodoBase RESULT = null;
          int exIleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int exIright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase exI = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int exDleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exDright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase exD = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 11b");
          RESULT = new NodoOperacion(exI, tipoOp.entre, exD);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("term", 10,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 27: // term ::= factor
        {
          NodoBase RESULT = null;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 11c");
          RESULT = ex;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("term", 10,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 28: // factor ::= LPAREN exp RPAREN
        {
          NodoBase RESULT = null;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          if (debug)
            System.out.println("\t regla 12a");
          RESULT = ex;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("factor", 11,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 29: // factor ::= NUM
        {
          NodoBase RESULT = null;
          int valorleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int valorright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          String valor = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 12b");
          System.out.println("Devolvi nodo numero entero");
          if (valor != null) {
            RESULT = new NodoValor(Integer.parseInt(valor));
          } else {
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("factor", 11,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 30: // factor ::= ID
        {
          NodoBase RESULT = null;
          int variableleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int variableright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          String variable = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 12c");
          if (variable != null) {
            System.out.println("Construyendo Nodo ID para Lexema: " + variable.toString());
            RESULT = new NodoIdentificador(variable.toString());
          } else {
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("factor", 11,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 31: // factor ::= ident
        {
          NodoBase RESULT = null;
          int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase id = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 12e");
          RESULT = id;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("factor", 11,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 32: // factor ::= error
        {
          NodoBase RESULT = null;
          if (debug)
            System.out.println("\t regla 12d");
          System.out.println("Ocurrio error en cup # 0003");
          RESULT = null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("factor", 11,
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
              RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 33: // factor ::= LBRACKET exp RBRACKET
        {
          NodoBase RESULT = null;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          if (debug)
            System.out.println("\t regla 12e");
          RESULT = ex;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("factor", 11,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 34: // ident ::= ID LBRACKET simple_exp RBRACKET
        {
          NodoBase RESULT = null;
          int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
          int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
          String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
          int exleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int exright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          NodoBase ex = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          if (debug)
            System.out.println("\t regla 14");
          if (id != null && ex != null)
            RESULT = new NodoVector(new NodoIdentificador(id.toString()), ex);
          else {
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("ident", 13,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 35: // vector_stmt ::= VECTOR ID NUM
        {
          NodoBase RESULT = null;
          int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          int numleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int numright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          String num = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 15a");
          if (id != null && num != null) {
            NodoVector vector = new NodoVector(new NodoIdentificador(id.toString()),
                new NodoValor(Integer.parseInt(num)));
            vector.setDeclaracion(true);
            System.out.println("Devuelve un nodo vector");
            RESULT = vector;
          } else {
            RESULT = null;
            System.out.println("Ocurrio error en cup # 00017");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_stmt", 12,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 36: // assign_stmt ::= ident ASSIGN exp
        {
          NodoBase RESULT = null;
          int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
          int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
          NodoBase id = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
          int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          NodoBase r = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          if (debug)
            System.out.println("\t regla 16");
          if (id != null)
            RESULT = new NodoAsignacion(id.toString(), r);
          else {
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0001");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt", 5,
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
              ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
        }
          return CUP$parser$result;

        /* . . . . . . */
        default:
          throw new Exception(
              "Invalid action number " + CUP$parser$act_num + "found in internal parse table");

      }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
        int CUP$parser$act_num,
        java_cup.runtime.lr_parser CUP$parser$parser,
        java.util.Stack CUP$parser$stack,
        int CUP$parser$top)
        throws java.lang.Exception {
      return CUP$parser$do_action_part00000000(
          CUP$parser$act_num,
          CUP$parser$parser,
          CUP$parser$stack,
          CUP$parser$top);
    }
  }

}
